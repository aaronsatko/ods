// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// DbIFace is an autogenerated mock type for the DbIFace type
type DbIFace struct {
	mock.Mock
}

// CheckDuplicate provides a mock function with given fields: _a0, _a1
func (_m *DbIFace) CheckDuplicate(_a0 string, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConn provides a mock function with given fields:
func (_m *DbIFace) GetConn() *pgx.Conn {
	ret := _m.Called()

	var r0 *pgx.Conn
	if rf, ok := ret.Get(0).(func() *pgx.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgx.Conn)
		}
	}

	return r0
}

// NewApp provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *DbIFace) NewApp(_a0 string, _a1 string, _a2 string, _a3 string, _a4 string, _a5 bool) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, bool) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserApps provides a mock function with given fields:
func (_m *DbIFace) UserApps() (pgx.Rows, error) {
	ret := _m.Called()

	var r0 pgx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func() (pgx.Rows, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() pgx.Rows); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDbIFace interface {
	mock.TestingT
	Cleanup(func())
}

// NewDbIFace creates a new instance of DbIFace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDbIFace(t mockConstructorTestingTNewDbIFace) *DbIFace {
	mock := &DbIFace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
